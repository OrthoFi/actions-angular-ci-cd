name: Angular CI/CD
on:
  workflow_call:
    inputs:
      app-name:
        description: The application name (eg patient, practice, onboarding)
        required: true
        type: string
      environment-name:
        description: The target environment name (eg demo, dev, production, risk)
        required: true
        type: string
      legacy-build:
        default: false
        description: Should run the build in legacy mode
        required: false
        type: boolean
      node-version:
        description: The node version to use
        required: true
        type: string

    secrets:
      aws-access-key-id:
        description: secrets.BUILD_AWS_ACCESS_KEY_ID
        required: true
      aws-secret-access-key:
        description: secrets.BUILD_AWS_SECRET_ACCESS_KEY
        required: true
      aws-role-dev:
        description: secrets.OCKERS_BUILD_ROLE
        required: true
      aws-role-prod:
        description: secrets.PRODUCTION_BUILD_ROLE
        required: true
      github-token:
        description: secrets.BUILD_GITHUB_TOKEN
        required: true
      myget-api-key:
        description: secrets.MYGET_API_KEY
        required: false
env:
  BUILD_GITHUB_TOKEN: ${{ secrets.github-token }}
  MYGET_API_KEY: ${{ secrets.myget-api-key }}
jobs:
  set-environment-name:
    name: Environment
    uses: orthofi/actions-utilities/.github/workflows/set_environment.yml@v1
    with:
      environment-name: ${{ github.inputs.environment }}
    secrets:
      github-token: ${{ secrets.github-token }}

  lint:
    name: Lint
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - uses: orthofi/actions-install-node-dependencies@v2

      - run: npm run ci-lint
        shell: pwsh

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - uses: orthofi/actions-install-node-dependencies@v2

      - run: npm run ci-test
        shell: pwsh

  deploy:
    name: Deploy
    if: ${{ needs.set-environment-name.outputs.is-valid == 'true' }}
    environment: ${{ needs.set-environment-name.outputs.environment-name }}
    needs: [set-environment-name]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - uses: orthofi/actions-install-node-dependencies@v2

      - uses: orthofi/actions-set-build-role@v1
        id: set-role
        with:
          dev-role: ${{ secrets.aws-role-dev }}
          environment-name: ${{ needs.set-environment-name.outputs.environment-name }}
          production-role: ${{ secrets.aws-role-prod }}

      - uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: us-east-1
          role-to-assume: ${{ steps.set-role.outputs.build-role }}

      - uses: orthofi/actions-aws-ssm-get-by-path@v2
        with:
          delimiter: __
          paths: ${{ format('/env/{1}/,/app/client-{0}/,/app/client-{0}/env/{1}/', inputs.app-name, needs.set-environment-name.outputs.environment-name) }}
          prefix: OFI__
          recursive: true
          save-to-environment: true

      - name: Build
        shell: pwsh
        env:
          OFI__ENVIRONMENT: ${{ needs.set-environment-name.outputs.environment-name }}
        run: |
          if ('${{ inputs.legacy-build }}' -eq 'true')
          {
            npm run ci-build -- --configuration=${{ needs.set-environment-name.outputs.environment-name }}
          } 
          else
          {
            npm run ci-build
          }

      - uses: orthofi/actions-angular-build-info@v1

      - uses: actions/upload-artifact@v3
        with:
          name: client
          path: dist

      - name: Upload to S3
        shell: bash
        run: aws s3 sync dist/ "s3://${{ env.OFI__BUCKET }}" --delete

      - name: Create Cloudfront Invalidation
        shell: bash
        run: aws cloudfront create-invalidation --distribution-id ${{ env.OFI__CLOUDFRONT_ID }} --paths "/*"
